
//@version=6
indicator("ROMAN INDICATOR", shorttitle = 'RV', overlay = true)

// === User Inputs
yPos        = input.string("Bottom", "Watermark Vertical Location", options = ["Top", "Middle", "Bottom"], inline = '1')
xPos        = input.string("Right", "Watermark Horizontal Location", options = ["Left", "Center", "Right"], inline = '1')
offsetY     = input.int(40, "Vertical Offset", minval=0, maxval=100)
txtCol      = input.color(color.rgb(255,255,255), 'Text Color', inline = '2')
txtSize     = input.string('Normal', 'Text Size', options = ['Huge', 'Large', 'Normal', 'Small'], inline = '2')
symTime     = input.bool(true, 'Symbol & Time Frame')
compName    = input.bool(true, 'Company Name')
indSec      = input.bool(true, 'Industry & Sector')
mCap        = input.bool(true, 'Show Market Cap')
showATR     = input.bool(false, "Show ATR (14-Day) & %")
showMA150   = input.bool(true, "Show Moving Average Position")
maPeriod    = input.int(150, "Moving Average Period", minval=1, maxval=500)
showRemainingDaysInput = input.bool(true, "Show Days Until Earnings")
showEarningsRow = input.bool(true, "Show Earnings Info")
atrRedThreshold = input.float(6.0, "Red Threshold (%)", minval=0)
atrYellowThreshold = input.float(3.0, "Yellow Threshold (%)", minval=0)
showStopLoss = input.bool(true, "Show Stop Loss (Close - ATR)")
stopSourceOption = input.string("Today", "Stop Loss Price Source", options = ["Today", "Yesterday", "2 Days Ago", "Auto"])
atrMultiplier = input.float(1.0, "ATR Multiplier", minval=0.1, step=0.1)
volumeLookback = input.string("1 Day", "Volume Change Period", options=["1 Day", "3 Days", "1 Week", "1 Month"])
maWeight     = input.float(0.6, "Trend calculation weight: MA", minval=0, maxval=1, step=0.1)
rsiWeight    = input.float(0.3, "Trend calculation weight: RSI", minval=0, maxval=1, step=0.1)
volWeight    = input.float(0.1, "Trend calculation weight: Volume", minval=0, maxval=1, step=0.1)
showFibonacci = input.bool(true, "Show Fibonacci Levels")


// === Font Size Mapping
sizer = switch txtSize
    'Huge' => size.huge
    'Large' => size.large
    'Normal' => size.normal
    'Small' => size.small

// === Market Cap Calculation
rounder(float val) =>
    if val >= 1e12
        math.round(math.abs(val / 1e12), 2)
    else if val >= 1e9
        math.round(math.abs(val / 1e9), 2)
    else
        math.round(math.abs(val / 1e6), 2)

// === Data
sector  = syminfo.sector
ind     = syminfo.industry
tick    = syminfo.ticker
tf      = timeframe.period
name    = syminfo.description
tso     = syminfo.shares_outstanding_total
marketcap = tso * close 
marCap    = marketcap > 1e12 ? 'T' : marketcap > 1e9 ? 'B' : 'M'

tf := tf == 'D' ? '1D' : tf == 'W' ? '1W' : tf == '60' ? '1H' :
      tf == '120' ? '2H' : tf == '180' ? '3H' : tf == '240' ? '4H' : tf

// === ATR
atrValue = ta.atr(14)
atrPercent = (atrValue / close) * 100
atrEmoji = atrPercent >= atrRedThreshold ? "üî¥" : atrPercent >= atrYellowThreshold ? "üü°" : "üü¢"

// === Stop Loss
manualBase = stopSourceOption == "Yesterday" ? close[1] : stopSourceOption == "2 Days Ago" ? close[2] : close
manualSL = manualBase - (atrValue * atrMultiplier)
autoSL = math.min(close - atrValue, close[1] - atrValue[1], close[2] - atrValue[2])
stopLoss = stopSourceOption == "Auto" ? autoSL : manualSL
distancePercent = ((close - stopLoss) / close) * 100
slEmoji = distancePercent > 5 ? "üü¢" : distancePercent > 2 ? "üü°" : "üî¥"

// === MA
customMA = ta.sma(close, maPeriod)
maStatus = close > customMA ? "Above " + str.tostring(maPeriod) + " MA üü¢" : "Below " + str.tostring(maPeriod) + " MA üî¥"

// === Earnings
earningsTime = earnings.future_time
earningsDateStr = ""
if not na(earningsTime) and showRemainingDaysInput
    todayUTC = timestamp(year(timenow), month(timenow), dayofmonth(timenow), 0, 0)
    earningsUTC = timestamp(year(earningsTime), month(earningsTime), dayofmonth(earningsTime), 0, 0)
    timediff = math.max(int(math.round((earningsUTC - todayUTC) / 86400000)), 0)
    earningsDateStr := str.tostring(timediff) + " days remaining"

// === RSI
rsiValue = ta.rsi(close, 14)
rsiEmoji = rsiValue > 70 ? "üî¥" : rsiValue < 30 ? "üî¥" : "üü¢"
rsiTrend = rsiValue > rsiValue[1] ? "‚¨ÜÔ∏è" : rsiValue < rsiValue[1] ? "‚¨áÔ∏è" : "‚è∏Ô∏è"

// === Volume Change %
volLookbackBars = volumeLookback == "3 Days" ? 3 : volumeLookback == "1 Week" ? 5 : volumeLookback == "1 Month" ? 21 : 1
volChange = volume[volLookbackBars] == 0 ? na : ((volume - volume[volLookbackBars]) / volume[volLookbackBars]) * 100
volEmoji = volChange > 0 ? "‚¨ÜÔ∏è" : volChange < 0 ? "‚¨áÔ∏è" : "‚è∏Ô∏è"

// === Trend Summary Row
maTrendScore = close > customMA ? maWeight : 0
rsiTrendScore = rsiValue > rsiValue[1] ? rsiWeight : 0
volTrendScore = volume > volume[1] ? volWeight : 0

totalScore = maTrendScore + rsiTrendScore + volTrendScore
trendSummary = "üìà Trend: " + (totalScore >= 0.6 ? "Uptrend üü¢" : "Downtrend üî¥")

// === Fibonacci Levels
fibLength = input.int(50, "Fibonacci Swing Length", minval=1)

swingHigh = ta.highest(high, fibLength)
swingLow = ta.lowest(low, fibLength)
fibRange = swingHigh - swingLow

fib236 = swingHigh - fibRange * 0.236
fib382 = swingHigh - fibRange * 0.382
fib618 = swingHigh - fibRange * 0.618
fib500 = swingHigh - fibRange * 0.5
fib786 = swingHigh - fibRange * 0.786
fib1272 = swingHigh + fibRange * 1.272
fib1618 = swingHigh + fibRange * 1.618

// === Stop Loss Label
var label slLabel = na
if showStopLoss and barstate.islast
    slLabel := label.new(x=bar_index + 1, y=stopLoss, text=(close <= stopLoss ? "SELL" : str.tostring(stopLoss, "#.##")), style=label.style_label_left, color=color.new(color.red, 60), textcolor=color.white, size=size.small)

// === Alert Conditions
alertcondition(showStopLoss and close <= stopLoss, title="Price Crossed Stop Loss", message="‚ö†Ô∏è Price has crossed below Stop Loss!")
alertcondition(close <= fib500 and close >= fib618, title="Buy Zone Entered", message="üìâ Entered BUY ZONE (Fib 0.5‚Äì0.618)")
alertcondition(close <= fib618 and close >= fib786, title="Deep Buy Zone Entered", message="üö® Entered DEEP BUY ZONE (Fib 0.618‚Äì0.786)")

// === Fibonacci Boxes
leftBox = bar_index + ta.highestbars(high, fibLength)
rightBox = bar_index

var box buyZoneBox = na
var box deepBuyBox = na

if showFibonacci
    if barstate.islast
        if not na(buyZoneBox)
            box.delete(buyZoneBox)
        if not na(deepBuyBox)
            box.delete(deepBuyBox)

        buyZoneBox := box.new(left=leftBox, right=rightBox, top=fib500, bottom=fib618, bgcolor=color.new(color.green, 85), border_color=color.new(color.green, 100))
        deepBuyBox := box.new(left=leftBox, right=rightBox, top=fib618, bottom=fib786, bgcolor=color.new(color.red, 85), border_color=color.new(color.red, 100))

        label.new(rightBox + 1, fib500, "Fib 0.5", style=label.style_label_left, textcolor=color.white, size=size.small, color=color.new(color.gray, 70))
        label.new(rightBox + 1, fib618, "BUY ZONE\nFib 0.618", style=label.style_label_left, textcolor=color.white, size=size.small, color=color.new(color.green, 70))
        label.new(rightBox + 1, fib786, "DEEP BUY\nFib 0.786", style=label.style_label_left, textcolor=color.white, size=size.small, color=color.new(color.red, 70))
        label.new(rightBox + 1, fib1272, "SELL ZONE\nFib 1.272", style=label.style_label_left, textcolor=color.white, size=size.small, color=color.new(color.orange, 70))
        label.new(rightBox + 1, fib1618, "TAKE PROFIT\nFib 1.618", style=label.style_label_left, textcolor=color.white, size=size.small, color=color.new(color.red, 70))

// === Table Display
posTable = str.lower(yPos) + '_' + str.lower(xPos)
var table sec = table.new(posTable, 1, 12, color.new(color.white,100), color.new(color.white,100), 1, color.new(color.white,100), 1)

if barstate.islast
    rowIndex = 0
    table.cell(sec, 0, rowIndex, "")
    rowIndex += 1

    if compName
        table.cell(sec, 0, rowIndex, mCap ? name + ' (' + str.tostring(nz(rounder(marketcap))) + marCap + ')' : name, text_color = txtCol, text_size = sizer, text_halign=text.align_left)
        rowIndex += 1

    if symTime
        table.cell(sec, 0, rowIndex, tick + ', ' + tf, text_color = txtCol, text_size = sizer, text_halign=text.align_left)
        rowIndex += 1

    if indSec
        table.cell(sec, 0, rowIndex, not na(sector) ? sector + ', ' + ind : '', text_color = txtCol, text_size = sizer, text_halign=text.align_left)
        rowIndex += 1

    if showATR
        table.cell(sec, 0, rowIndex, "ATR (14): " + str.tostring(atrValue, "#.##") + " (" + str.tostring(atrPercent, "#.##") + "%) " + atrEmoji, text_color = txtCol, text_size = sizer, text_halign=text.align_left)
        rowIndex += 1

    if showMA150
        table.cell(sec, 0, rowIndex, maStatus, text_color = txtCol, text_size = sizer, text_halign=text.align_left)
        rowIndex += 1

    if showStopLoss
        table.cell(sec, 0, rowIndex, "Stop Loss: " + str.tostring(stopLoss, "#.##") + " " + slEmoji, text_color = txtCol, text_size = sizer, text_halign=text.align_left)
        rowIndex += 1

    if showEarningsRow and earningsDateStr != ""
        table.cell(sec, 0, rowIndex, "Earnings: " + earningsDateStr, text_color = txtCol, text_size = sizer, text_halign=text.align_left)
        rowIndex += 1

    table.cell(sec, 0, rowIndex, "RSI (14): " + str.tostring(rsiValue, "#.##") + " " + rsiEmoji + " " + rsiTrend, text_color = txtCol, text_size = sizer, text_halign=text.align_left)
    rowIndex += 1

    table.cell(sec, 0, rowIndex, "Volume Œî: " + str.tostring(volChange, "#.##") + "% " + volEmoji, text_color = txtCol, text_size = sizer, text_halign=text.align_left)
    rowIndex += 1

    table.cell(sec, 0, rowIndex, trendSummary, text_color = txtCol, text_size = sizer, text_halign=text.align_left)
    rowIndex += 1
